h1. Hominid

Hominid is a Ruby gem that provides a wrapper for interacting with the "Mailchimp":http://www.mailchimp.com email marketing service API ("version 1.2":http://www.mailchimp.com/api/1.2/).

h2. Installation

<pre><code>sudo gem install hominid</code></pre>

Hominid is hosted at "Gemcutter":http://gemcutter.org. Be sure that you have the Gemcutter gem installed if you are having trouble installing Hominid:

<pre><code>sudo gem install gemcutter</code></pre>

h2. Requirements

You will need a "Mailchimp":http://eepurl.com/ew8J account. Once you have your Mailchimp account set up, you will need to "generate an API key":http://admin.mailchimp.com/account/api/ in order to get started using Hominid.

h2. Usage

Hominid is intended to be a complete Ruby wrapper for working with the Mailchimp API. As of release 2.0.2, all methods available from the Mailchimp API (Version 1.2) are available.

h3. Working with Lists

To work with Mailchimp lists, use the @Hominid::List@ class to work with a particular list or lists at Mailchimp. For more information, see @Hominid::List@.

h4. List finder methods

There are finder methods available to help with finding Mailchimp lists:

<pre><code>lists = Hominid::List.all</code></pre>

<pre><code>list = Hominid::List.find("List ID or List Web ID")
list = Hominid::List.find_by_name("List Name")
list = Hominid::List.find_by_id("List ID")
list = Hominid::List.find_by_web_id("List Web ID")</code></pre>

h4. Subscribing

To subscribe a person or persons to a Mailchimp list:

<pre><code>list.subscribe("sample@emailaddress.com")</code></pre>

<pre><code>list.subscribe_many([{:EMAIL => 'sample@emailaddress.com', :EMAIL_TYPE => 'html'}, {:EMAIL => 'another@emailaddress.com', :EMAIL_TYPE => 'html'}])</code></pre>

h4. Unsubscribing

To unsubscribe a person or persons from a Mailchimp list:

<pre><code>list.unsubscribe("sample@emailaddress.com")</code></pre>

<pre><code>list.unsubscribe_many(['sample@emailaddress.com', 'another@emailaddress.com'])</code></pre>

h4. Updating

In the following example, we will be changing a person's email address on the Mailchimp list from @sample@ to @another@:

<pre><code>list.update_member('sample@emailaddress.com', {:EMAIL => 'another@emailaddress.com'}, 'html')</code></pre>

You can also updated other attributes by including the MERGE_VARS that you want to change, such as @EMAIL@, @FNAME@, @LNAME@ and @INTERESTS@. Get a list of merge tags for a particular list by running @list.merge_tags@.

h3. Working with Campaigns

To work with Mailchimp campaigns, use the @Hominid::Campaign@ class to work with a particular campaign or campaignss at Mailchimp. For more information, see @Hominid::Campaign@.

There are finder methods available to help with finding Mailchimp campaigns:

<pre><code>campaigns = Hominid::Campaign.all</code></pre>

<pre><code>campaigns = Hominid::Campaign.find_by_list_name("List Name")</code></pre>

h4. Creating a Campaign

You can create new campaigns easily using Hominid as well. Please refer to the documentation in @Hominid::Campaign@ for more information about the options available when creating a new campaign.

<pre><code>new_campaign = Hominid::Campaign.create('regular', options, content, segment_opts, type_opts)</code></pre>

h4. Schedule a Campaign

As an example of how to work with a particular campaign, use the @Hominid::Campaign@ class. Extending from the previous example, since the @create_campaign@ method returns the ID of the created campaign, we can use it to instantiate the @Hominid::Campaign@ class and schedule our new campaign to go be delivered 2 days from now:

<pre><code>campaign = Hominid::Campaign.new(:id => new_campaign)</code></pre>

<pre><code>campaign.schedule_campaign(2.days.from_now)</code></pre>

h3. Helper Methods

The @Hominid::Helper@ class provides a way to access the helper methods for the Mailchimp API. For example, to create a new folder for filing campaigns:

<pre><code>folder = Hominid::Helper.create_folder("Folder Name")</code></pre>

h3. Security Methods

The @Hominid::Security@ class provides a way to access the security methods for the Mailchimp API. You will need to pass your Mailchimp account username and password in order to create a @Hominid::Security@ object.

<pre><code>security = Hominid::Security.new(:username => 'Bob', :password => 'Smith', :api_key => 'API_KEY')
security.api_keys</code></pre>

h2. Contributors

Hominid is maintained by "Brian Getting":http://terra-firma-design.com. A very special thank-you to "Michael Str√ºder":http://github.com/mikezter for all of his hard work. Also, Hominid wouldn't be anywhere near as awesome as it is today without fantastic contributions and inspiration from:

* "Alan Harper":http://github.com/aussiegeek
* "Will":http://github.com/willinfront
* "Ben Woosley":http://github.com/Empact
* "banker":http://github.com/banker
* "Kristoffer Renholm":http://github.com/renholm
* "Wiktor Schmidt":http://github.com/netguru
* "ron":http://github.com/ron
* "Matthew Carlson":http://mandarinsoda.com/
* "Kelly Mahan":http://digimedia.com/
* "C.G. Brown":http://www.projectlocker.com/
* "Bill Abney":http://github.com/babney

h2. Note on Patches/Pull Requests

# Fork the project.
# Make your feature addition or bug fix.
# Add tests for it. This is important so I don't break it in a future version unintentionally.
# Commit, do not mess with rakefile, version, or history. (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
# Send me a pull request. Bonus points for topic branches.

h2. Copyright

Copyright (c) 2009 Brian Getting. See LICENSE for details.